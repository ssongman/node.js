{"version":3,"sources":["components/Customer.js","App.js","serviceWorker.js","index.js"],"names":["Customer","TableRow","TableCell","this","props","id","src","image","alt","name","birthday","gender","job","React","Component","customers","App","Table","TableHead","TableBody","map","c","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAmBeA,E,iLAbf,OACA,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KAAYC,KAAKC,MAAMC,IACvB,kBAACH,EAAA,EAAD,KAAW,yBAAKI,IAAKH,KAAKC,MAAMG,MAAOC,IAAI,aAC3C,kBAACN,EAAA,EAAD,KAAYC,KAAKC,MAAMK,MACvB,kBAACP,EAAA,EAAD,KAAYC,KAAKC,MAAMM,UACvB,kBAACR,EAAA,EAAD,KAAYC,KAAKC,MAAMO,QACvB,kBAACT,EAAA,EAAD,KAAYC,KAAKC,MAAMQ,U,GATAC,IAAMC,W,gCCKvBC,EAAY,CAClB,CACA,GAAM,EACN,MAAS,+BACT,KAAQ,qBACR,SAAY,WACZ,OAAU,eACV,IAAO,sBAEP,CACA,GAAM,EACN,MAAS,+BACT,KAAQ,qBACR,SAAY,WACZ,OAAU,eACV,IAAO,kCAEP,CACA,GAAM,EACN,MAAS,+BACT,KAAQ,qBACR,SAAY,WACZ,OAAU,eACV,IAAO,6BA8BQC,E,iLAxBX,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,2BACA,kBAACA,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,iCACA,kBAACA,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,uBAGJ,kBAACiB,EAAA,EAAD,KACGJ,EAAUK,KAAI,SAAAC,GACf,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAEhB,GAAIA,GAAIgB,EAAEhB,GAAIE,MAAOc,EAAEd,MAAOE,KAAMY,EAAEZ,KAAMC,SAAUW,EAAEX,SAAUC,OAAQU,EAAEV,OAAQC,IAAKS,EAAET,gB,GAjB7GE,aCxBES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7b0481d.chunk.js","sourcesContent":["import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nclass Customer extends React.Component {\nrender() {\nreturn (\n<TableRow>\n<TableCell>{this.props.id}</TableCell>\n<TableCell><img src={this.props.image} alt=\"profile\"/></TableCell>\n<TableCell>{this.props.name}</TableCell>\n<TableCell>{this.props.birthday}</TableCell>\n<TableCell>{this.props.gender}</TableCell>\n<TableCell>{this.props.job}</TableCell>\n</TableRow>\n)\n}\n}\n\nexport default Customer;\n\n","import React, { Component } from 'react';\nimport Customer from './components/Customer'\nimport './App.css';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nconst customers = [\n{\n'id': 1,\n'image': 'https://placeimg.com/64/64/1',\n'name': '김병갑',\n'birthday': '19800101',\n'gender': '남자',\n'job': '대학생'\n},\n{\n'id': 2,\n'image': 'https://placeimg.com/64/64/2',\n'name': '황정필',\n'birthday': '19800101',\n'gender': '남자',\n'job': '프로그래머'\n},\n{\n'id': 3,\n'image': 'https://placeimg.com/64/64/3',\n'name': '송양종',\n'birthday': '19800101',\n'gender': '남자',\n'job': '디자이너'\n}\n]\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>번호</TableCell>\n              <TableCell>이미지</TableCell>\n              <TableCell>이름</TableCell>\n              <TableCell>생년월일</TableCell>\n              <TableCell>성별</TableCell>\n              <TableCell>직업</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {customers.map(c => {\n            return <Customer key={c.id} id={c.id} image={c.image} name={c.name} birthday={c.birthday} gender={c.gender} job={c.job} />\n            })}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}